/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MapViewofStation.java
 *
 * Created on 2011-8-30, 22:28:07
 */

package cn.edu.xaut.GeoTool;

/**
 * @author greensubmarine
 */

import cn.edu.xaut.SLGridDataNode.Util.LoginNodeBean;
import com.vividsolutions.jts.geom.LineString;
import com.vividsolutions.jts.geom.MultiLineString;
import com.vividsolutions.jts.geom.MultiPolygon;
import com.vividsolutions.jts.geom.Polygon;
import org.geotools.data.DataStoreFinder;
import org.geotools.data.FeatureSource;
import org.geotools.data.postgis.PostgisNGDataStoreFactory;
import org.geotools.factory.CommonFactoryFinder;
import org.geotools.jdbc.JDBCDataStore;
import org.geotools.map.DefaultMapContext;
import org.geotools.map.MapContext;
import org.geotools.map.MapLayer;
import org.geotools.renderer.lite.StreamingRenderer;
import org.geotools.styling.Style;
import org.geotools.styling.StyleFactory;
import org.geotools.swing.action.PanAction;
import org.geotools.swing.action.ZoomInAction;
import org.geotools.swing.action.ZoomOutAction;
import org.geotools.swing.styling.JSimpleStyleDialog;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.filter.FilterFactory;
import org.opengis.referencing.crs.CoordinateReferenceSystem;

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class MapViewofStations extends javax.swing.JFrame {

static StyleFactory styleFactory = CommonFactoryFinder.getStyleFactory(null);
static FilterFactory filterFactory = CommonFactoryFinder.getFilterFactory(null);
static Map PostgisconnInformation = new HashMap();
static JDBCDataStore pgDatastore;
static List<FeatureSource> features = new ArrayList<FeatureSource>();


/** Creates new form MapViewofStation */
public MapViewofStations() throws Exception {
    initComponents();
}

/** This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">
private void initComponents() throws Exception {

    PostgisconnInformation.put("dbtype", "postgis");
    PostgisconnInformation.put("host", LoginNodeBean.getIP().toString());
    PostgisconnInformation.put("port", Integer.parseInt(LoginNodeBean.getPortNum().toString()));
    PostgisconnInformation.put("database", "postgis");
    PostgisconnInformation.put("user", LoginNodeBean.getUsername().toString());
    PostgisconnInformation.put("passwd", LoginNodeBean.getPassword().toString());
    PostgisconnInformation.put(PostgisNGDataStoreFactory.LOOSEBBOX, true);
    PostgisconnInformation.put(PostgisNGDataStoreFactory.PREPARED_STATEMENTS, true);
    MapContext map = new DefaultMapContext();

    jLabel2 = new javax.swing.JLabel();
    jSeparator2 = new javax.swing.JSeparator();
    jSeparator1 = new javax.swing.JSeparator();
    jSplitPane1 = new javax.swing.JSplitPane();
    jLabel1 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();
    jSplitPane2 = new javax.swing.JSplitPane();
    jPanel2 = new javax.swing.JPanel();
    jToolBar1 = new javax.swing.JToolBar();
    jSeparator3 = new javax.swing.JSeparator();
    pgDatastore = (JDBCDataStore) DataStoreFinder.getDataStore(PostgisconnInformation);
    new PGDataStoreBean().setPGDataStore(pgDatastore);
    if (pgDatastore != null) {
        System.out.println("连接postgis数据库成功");
    } else {
        System.out.println("连接postgis数据库失败");
    }
    ComboBoxModel cbm = new DefaultComboBoxModel(pgDatastore.getTypeNames());
    jComboBox1.setModel(cbm);
    FeatureSource featureSource = pgDatastore.getFeatureSource("weihai");
    FeatureSource featureSource1 = pgDatastore.getFeatureSource("Precipitation Gauges");
    FeatureSource featureSource2 = pgDatastore.getFeatureSource("river");
    FeatureSource featureSource3 = pgDatastore.getFeatureSource("reservoir");
    FeatureSource featureSource4 = pgDatastore.getFeatureSource("huangleihe");
    // Create a map context and add our shapefile to it
    Style style = createStyle2(featureSource);
    Style style1 = createStyle2(featureSource1);
    Style style2 = createStyle2(featureSource2);
    Style style3 = createStyle2(featureSource3);
    Style style4 = createStyle2(featureSource4);
    // Add the features and the associated Style object to
    // the MapContext as a new MapLayer
    MapLayer layer = new MapLayer(featureSource, style);
    MapLayer layer1 = new MapLayer(featureSource1, style1);
    MapLayer layer2 = new MapLayer(featureSource2, style2);
    MapLayer layer3 = new MapLayer(featureSource3, style3);
    MapLayer layer4 = new MapLayer(featureSource4, style4);
    CoordinateReferenceSystem worldCRS = map.getCoordinateReferenceSystem();
    map.addLayer(layer);
    map.addLayer(layer);
    map.addLayer(layer1);
    map.addLayer(layer2);
    map.addLayer(layer3);
    map.addLayer(layer4);
    map.setCoordinateReferenceSystem(worldCRS);
    mapLayerTable1 = new org.geotools.swing.MapLayerTable();
    jMapPane1 = new org.geotools.swing.JMapPane(new StreamingRenderer(), map);
    jMapPane1.setDisplayArea(map.getLayerBounds());
    jMapPane1.setMapContext(map);
    jMapPane1.setMapLayerTable(mapLayerTable1);
    mapLayerTable1.setMapPane(jMapPane1);
    mapLayerTable1.onAddLayer(layer);
    mapLayerTable1.onAddLayer(layer1);
    mapLayerTable1.onAddLayer(layer2);
    mapLayerTable1.onAddLayer(layer3);
    mapLayerTable1.onAddLayer(layer4);
    mapLayerTable1.setVisible(true);
    statusBar1 = new org.geotools.swing.StatusBar(jMapPane1);
    javax.swing.JButton zoominbutton = new javax.swing.JButton(new ZoomInAction(jMapPane1));
    javax.swing.JButton zoomoutbutton = new javax.swing.JButton(new ZoomOutAction(jMapPane1));
    javax.swing.JButton pambutton = new javax.swing.JButton(new PanAction(jMapPane1));
    jToolBar1.setOrientation(javax.swing.JToolBar.HORIZONTAL);
    jToolBar1.setFloatable(false);
    jToolBar1.add(zoominbutton);
    jToolBar1.add(zoomoutbutton);
    jToolBar1.add(pambutton);
    jLabel2.setText(org.openide.util.NbBundle.getMessage(MapViewofStation.class, "MapViewofStation.jLabel2.text")); // NOI18N
    jLabel2.setName("jLabel2"); // NOI18N

    jSeparator2.setName("jSeparator2"); // NOI18N

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setName("Form"); // NOI18N

    jSeparator1.setName("jSeparator1"); // NOI18N

    jSplitPane1.setName("jSplitPane1"); // NOI18N

    jLabel1.setText(org.openide.util.NbBundle.getMessage(MapViewofStation.class, "MapViewofStation.jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N

    //jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    jComboBox1.setName("jComboBox1"); // NOI18N

    jSplitPane2.setName("jSplitPane2"); // NOI18N

    jPanel2.setName("jPanel2"); // NOI18N

    jToolBar1.setRollover(true);
    jToolBar1.setName("jToolBar1"); // NOI18N

    jSeparator3.setName("jSeparator3"); // NOI18N

    //jMapPane1.setName("jMapPane1"); // NOI18N

    //statusBar1.setName("statusBar1"); // NOI18N

    javax.swing.GroupLayout jMapPane1Layout = new javax.swing.GroupLayout(jMapPane1);
    jMapPane1.setLayout(jMapPane1Layout);
    jMapPane1Layout.setHorizontalGroup(
            jMapPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
    );
    jMapPane1Layout.setVerticalGroup(
            jMapPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jMapPane1Layout.createSequentialGroup()
                                      .addContainerGap(270, Short.MAX_VALUE)
                                      .addComponent(statusBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
                    .addComponent(jMapPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                                      .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                      .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                      .addComponent(jMapPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jSplitPane2.setRightComponent(jPanel2);

    mapLayerTable1.setName("mapLayerTable1"); // NOI18N
    jSplitPane2.setLeftComponent(mapLayerTable1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                                      .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                          .addComponent(jLabel1)
                                                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                          .addComponent(jComboBox1, 0, 1033, Short.MAX_VALUE))
                                                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                                                        .addComponent(jSplitPane2)))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                      .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                                                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    pack();
}// </editor-fold>

/**
 * @param args the command line arguments
 */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MapViewofStations().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MapViewofStations.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }*/
private Style createStyle2(FeatureSource featureSource) {
    SimpleFeatureType schema = (SimpleFeatureType) featureSource.getSchema();
    Class geomType = schema.getGeometryDescriptor().getType().getBinding();
    if (Polygon.class.isAssignableFrom(geomType) || MultiPolygon.class.isAssignableFrom(geomType)) {
        return JSimpleStyleDialog.showDialog(null, schema);
    } else if (LineString.class.isAssignableFrom(geomType) || MultiLineString.class.isAssignableFrom(geomType)) {
        return JSimpleStyleDialog.showDialog(null, schema);
    } else {
        return JSimpleStyleDialog.showDialog(null, schema);
    }
}

// Variables declaration - do not modify
private javax.swing.JComboBox jComboBox1;
private javax.swing.JLabel jLabel1;
private javax.swing.JLabel jLabel2;
private org.geotools.swing.JMapPane jMapPane1;
private javax.swing.JPanel jPanel2;
private javax.swing.JSeparator jSeparator1;
private javax.swing.JSeparator jSeparator2;
private javax.swing.JSeparator jSeparator3;
private javax.swing.JSplitPane jSplitPane1;
private javax.swing.JSplitPane jSplitPane2;
private javax.swing.JToolBar jToolBar1;
private org.geotools.swing.MapLayerTable mapLayerTable1;
private org.geotools.swing.StatusBar statusBar1;
// End of variables declaration

}
